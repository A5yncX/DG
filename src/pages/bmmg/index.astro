---
import Layout from "../../layouts/Layout.astro";

// 定义各分类对应的 JSON 文件地址
const jsonUrls = {
  movie: "https://neodb.asyncx.top/data/neodb/movie.json",
  tv: "https://neodb.asyncx.top/data/neodb/tv.json",
  game: "https://neodb.asyncx.top/data/neodb/game.json",
  book: "https://neodb.asyncx.top/data/neodb/book.json"
};

// 定义分类中文显示名称
const categoryMap = {
  movie: "影",
  tv: "剧",
  game: "游",
  book: "书"
};

// 用于存储各分类的所有数据（不做时间过滤，取最新20条）
const grouped = {};

// 用于存储合并后的数据（仅包含过去3个月内的记录）
let mergedRecentItems = [];

// 计算当前日期三个月前的日期
const now = new Date();
const threeMonthsAgo = new Date();
threeMonthsAgo.setMonth(now.getMonth() - 3);

// 读取各 JSON 文件(目前随博客更新而更新)
await Promise.all(
  Object.entries(jsonUrls).map(async ([cat, url]) => {
    const res = await fetch(url);
    const jsonData = await res.json();
    // 对该分类所有数据按创建时间降序排序（不做时间过滤）
    const sortedAll = jsonData.data.sort(
      (a, b) => new Date(b.created_time) - new Date(a.created_time)
    );
    // 分类展示：取前20条，并附加所属分类信息
    grouped[cat] = sortedAll.slice(0, 20).map(item => ({ ...item, category: cat }));
    // 合并展示：过滤出过去3个月内的记录，并附加所属分类信息
    const filteredRecent = jsonData.data.filter(
      (item) => new Date(item.created_time) >= threeMonthsAgo
    ).map(item => ({ ...item, category: cat }));
    mergedRecentItems = mergedRecentItems.concat(filteredRecent);
  })
);

// 对合并后的所有数据按创建时间降序排序，并取前20条
mergedRecentItems.sort((a, b) => new Date(b.created_time) - new Date(a.created_time));
mergedRecentItems = mergedRecentItems.slice(0, 20);

// 定义生成跳转链接的函数
const getLink = (entry) => {
  if (entry.category === "movie") {
    // 对于电影，点击跳转到固定的电影 JSON 文件地址
    return jsonUrls.movie;
  } else {
    // 对于其它分类，构造链接为：https://neodb.social/{分类}/{uuid}
    return `https://neodb.social/${entry.category}/${entry.item.uuid}`;
  }
};
---
<Layout title="NeoDB" description="NeoDB">
  <div class="container mx-auto py-8">
    <!-- <h1 class="text-3xl font-bold mb-6">最近看/玩了什么</h1> -->
    <!-- 全部展示部分：仅展示过去3个月内的记录 -->
    <section class="mb-8">
      <h2 class="text-2xl font-semibold mb-4">最近3个月看/玩了什么</h2>
      {mergedRecentItems && mergedRecentItems.length > 0 ? (
        <div class="grid grid-cols-2 md:grid-cols-5 gap-3">
          {mergedRecentItems.map((entry) => (
            <a href={getLink(entry)} class="block">
              <div class="rounded overflow-hidden">
                <img
                  src={entry.item.cover_image_url}
                  alt={entry.item.title}
                  loading="lazy"
                  class="w-full h-48 object-cover"
                />
              </div>
              <p class="mt-2 text-sm text-center text-gray-500 dark:text-gray-500">
                {entry.item.title}
              </p>
            </a>
          ))}
        </div>
      ) : (
        <p class="text-gray-500">暂无数据</p>
      )}
    </section>
    <hr class="my-8 border-t border-black dark:border-white" />
    <!-- 分类展示部分：各分类显示最新20条数据，不限制时间 -->
    {Object.keys(jsonUrls).map((cat) => (
      <section class="mb-12">
        <h2 class="text-2xl font-semibold mb-4">{categoryMap[cat]}</h2>
        {grouped[cat] && grouped[cat].length > 0 ? (
          <div class="grid grid-cols-2 md:grid-cols-5 gap-3">
            {grouped[cat].map((entry) => (
              <a href={getLink(entry)} class="block">
                <div class="rounded overflow-hidden">
                  <img
                    src={entry.item.cover_image_url}
                    alt={entry.item.title}
                    loading="lazy"
                    class="w-full h-48 object-cover"
                  />
                </div>
                <p class="mt-2 text-sm text-center text-gray-500 dark:text-gray-500">
                  {entry.item.title}
                </p>
              </a>
            ))}
          </div>
        ) : (
          <p class="text-gray-500">暂无数据</p>
        )}
      </section>
    ))}
  </div>
</Layout>
