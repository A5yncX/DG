---
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import Layout from "./Layout.astro";
import Hr from"../components/Hr.astro"
import Comments from"../components/Comments.astro"

import Random from "../components/utils/Randomblogs.astro"

type Props = CollectionEntry<"blog">["data"];

const { title, description, pubDate, updatedDate, heroImage, lang, tags, comments, random } =
  Astro.props;  
---

<Layout
  title={title}
  description={description}
  heroImage={heroImage}
  pubDate={pubDate}
  updatedDate={updatedDate}
  lang={lang}
>
  <article data-pagefind-body>
    <div class="prose">
      <div class="title">
        <h1 style="text-align: center;">{title}</h1>
      </div>
      <div class="date" style="text-align: center;">
        {!!tags?.length && (
          <div class="tags" style="font-family: var(--font-family-mono);">
            {tags.map((tag, i) => (
              <>
                <a href={`/${lang}/tags/${tag}`} class="taglink" data-pagefind-filter="tag">#{tag}</a>
                {i < tags.length - 1 && ""}
              </>
            ))}
          </div>
        )}
        <FormattedDate date={pubDate} />
        <style>
          .date {
            font-family: var(--font-family-mono);
            color: var(--gray);
          }
          .tags {
            text-align: center;
          }
          .tags a {
            all: initial;
            color: #000;
            font-family: var(--font-family-mono);
            font-size: 0.8rem;
            transition: 0.2s ease-in-out;
            background-color: var(--hc);
            padding: 0.1rem 0.3rem 0.1rem 0.3rem;
            border-radius: 10px;
          }
          .tags a:hover {
            background-color: var(--accent);
            text-decoration: none;
            transition: 0.2s ease-in-out;
          }
        </style>
      </div>
      <Hr />
    <slot />
  </div>
    {random !== false && (
      <div class="random-container">
        <Random />
      </div>
    )}
    {comments !== false && <Comments />}
  </article>
  <!-- <script>
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));
    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";
      let copyButton = document.createElement("button");
      copyButton.className = "copy-code";
      copyButton.innerHTML = copyButtonLabel;
      copyButton.style.opacity = "0"; 
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);
      codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);
      codeBlock.addEventListener("mouseenter", () => {
        copyButton.style.transition = "opacity 0.5s";
        copyButton.style.opacity = "1";
      });
      codeBlock.addEventListener("mouseleave", () => {
        copyButton.style.transition = "opacity 0.5s";
        copyButton.style.opacity = "0";
      });
      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }
    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code.innerText;
      await navigator.clipboard.writeText(text);
      button.innerText = "Copied";
      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
</script> -->
</Layout>
