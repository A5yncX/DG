<div id="starfield" class="absolute inset-0">
  <canvas id="starfield-canvas"></canvas>
</div>
<style>
  .absolute {
    position: absolute;
  }
  .inset-0 {
    inset: 5px;
  }
</style>
<script>
  import invariant from "tiny-invariant";

  const COUNT = 1800; //星星数量
  const SPEED = 0.07;
  const MIN_COLOR_CYCLE_DURATION = 1000; // 最短颜色循环周期，毫秒
  const MAX_COLOR_CYCLE_DURATION = 9000; // 最长颜色循环周期，毫秒

  class Star {
    x: number;
    y: number;
    z: number;
    xPrev: number;
    yPrev: number;
    color: string;
    colorCycleDuration: number;

    constructor(x = 0, y = 0, z = 0, color = 'rgba(169, 217, 236)', colorCycleDuration = 5000) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.xPrev = x;
      this.yPrev = y;
      this.color = color;
      this.colorCycleDuration = colorCycleDuration;
    }

    update(width: number, height: number, speed: number) {
      this.xPrev = this.x;
      this.yPrev = this.y;
      this.z += speed * 0.0675;
      this.x += this.x * (speed * 0.0225) * this.z;
      this.y += this.y * (speed * 0.0225) * this.z;
      if (
        this.x > width / 2 ||
        this.x < -width / 2 ||
        this.y > height / 2 ||
        this.y < -height / 2
      ) {
        this.x = Math.random() * width - width / 2;
        this.y = Math.random() * height - height / 2;
        this.xPrev = this.x;
        this.yPrev = this.y;
        this.z = 0;
      }
    }

    updateColor(currentTime: number) {
      const halfCycle = this.colorCycleDuration / 2;
      const cycleTime = currentTime % this.colorCycleDuration;
      if (cycleTime < halfCycle) {
        const ratio = cycleTime / halfCycle;
        this.color = `rgba(${Math.floor(169 * (1 - ratio) + 40 * ratio)}, 
                            ${Math.floor(217 * (1 - ratio) + 42 * ratio)}, 
                            ${Math.floor(236 * (1 - ratio) + 52 * ratio)}, 1)`;
      } else {
        const ratio = (cycleTime - halfCycle) / halfCycle;
        this.color = `rgba(${Math.floor(40 * (1 - ratio) + 169 * ratio)}, 
                            ${Math.floor(42 * (1 - ratio) + 217 * ratio)}, 
                            ${Math.floor(52 * (1 - ratio) + 236 * ratio)}, 1)`;
      }
    }

    draw(ctx: CanvasRenderingContext2D) {
      ctx.lineWidth = this.z;
      ctx.strokeStyle = this.color;
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(this.xPrev, this.yPrev);
      ctx.stroke();
    }
  }

  const stars = Array.from({ length: COUNT }, () => 
    new Star(0, 0, 0, 'rgba(169, 217, 236)', Math.random() * (MAX_COLOR_CYCLE_DURATION - MIN_COLOR_CYCLE_DURATION) + MIN_COLOR_CYCLE_DURATION)
  );

  let rafId = 0;

  const canvas = document.querySelector(
    "#starfield-canvas",
  ) as HTMLCanvasElement;
  invariant(canvas, "canvas should not be null");
  const ctx = canvas.getContext("2d");

  const container = document.querySelector("#starfield") as HTMLElement;
  invariant(container, "container should not be null");
  const resizeObserver = new ResizeObserver(setup);
  resizeObserver.observe(container);

  function setup() {
    invariant(ctx, "canvas context should not be null");
    rafId > 0 && cancelAnimationFrame(rafId);

    const { clientWidth: width, clientHeight: height } = container;
    const dpr = window.devicePixelRatio || 1;
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    ctx.scale(dpr, dpr);

    for (const star of stars) {
      star.x = Math.random() * width - width / 2;
      star.y = Math.random() * height - height / 2;
      star.z = 0;
    }

    ctx.translate(width / 2, height / 2);
    ctx.fillStyle = "rgba(40, 42, 52, 0.1)";
    rafId = requestAnimationFrame(frame);
  }

  function frame() {
    invariant(ctx, "canvas context should not be null");
    const { clientWidth: width, clientHeight: height } = container;
    const currentTime = performance.now();

    // 清空画布
    ctx.clearRect(-width / 2, -height / 2, width, height);

    // 绘制背景
    ctx.fillStyle = "rgba(40, 42, 52, 0.3)";
    ctx.fillRect(-width / 2, -height / 2, width, height);

    // 绘制星星轨迹
    for (const star of stars) {
      star.update(width, height, SPEED);
      star.updateColor(currentTime);
      star.draw(ctx);
    }

    // 请求下一帧动画
    rafId = requestAnimationFrame(frame);
  }
</script>