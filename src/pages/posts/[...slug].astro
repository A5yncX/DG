---
import { type CollectionEntry, getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { formatDate } from "../../lib/utils";
import Comments from"../../components/Comments.astro";
import Toc from "../../components/Toc.astro";
import Random from "../../components/Random.astro";

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<"posts">;

const post = Astro.props;
const { Content, headings } = await post.render();
---

<Layout
  title={post.data.title}
  description={post.data.description}
  image={post.data.image}
  className="max-w-2xl"
>
  <main>
    <div class="flex items-center justify-between mb-5">
      <h1 class="text-xl font-heading font-bold text-zinc-900 dark:text-zinc-100">
        {post.data.title}
      </h1>
      <p class="ml-4 text-sm font-medium text-zinc-500">
        {formatDate(post.data.pubDate)}
      </p>
    </div>
    

    <!-- 显示文章标签 -->
    {post.data.tags.length > 0 && (
      <div class="mb-5" data-pagefind-ignore="all">
        <ul class="flex flex-wrap gap-2">
          {post.data.tags.map((tag) => (
            <li>
              <a
                href={`/tags/${tag}/`}
                class="group flex justify-between gap-3 text-sm px-2 py-1 rounded bg-bgdefault dark:bg-fontdefault text-fontdefault dark:text-bgdefault"
              >
                #{tag}
              </a>
            </li>
          ))}
        </ul>
      </div>
    )}
    

        <!-- TOC -->
        <aside class="">
          <Toc headings={headings} />
        </aside>
    <article data-pagefind-body>
      <Content />
    </article>
  </main>
  <Random />
  <Comments />
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      document.querySelectorAll("img").forEach(img => {
        const originalParent = img.parentElement;
        const originalNextSibling = img.nextSibling;
        let dialog = null;
        
        function closeLightbox() {
          if (dialog) {
            dialog.removeEventListener("click", onDialogClick);
            dialog.removeEventListener("cancel", onDialogCancel);
            if (typeof dialog.close === "function") {
              dialog.close();
            } else {
              dialog.removeAttribute("open");
            }
            // Move the image back to its original position.
            if (originalNextSibling) {
              originalParent.insertBefore(img, originalNextSibling);
            } else {
              originalParent.appendChild(img);
            }
            // Restore the image's original inline style.
            const orig = img.getAttribute("data-original-style");
            if (orig !== null) {
              img.setAttribute("style", orig);
              img.removeAttribute("data-original-style");
            }
            dialog.remove();
            dialog = null;
          }
        }
        
        function onDialogClick(e) {
          // Clicking anywhere in the dialog (even on the image) closes the lightbox.
          closeLightbox();
        }
        
        function onDialogCancel(e) {
          e.preventDefault();
          closeLightbox();
        }
        
        function openLightbox() {
          dialog = document.createElement("dialog");
          dialog.style.padding = "0";
          dialog.style.border = "none";
          dialog.style.background = "transparent";
          // Center the image.
          dialog.style.display = "flex";
          dialog.style.alignItems = "center";
          dialog.style.justifyContent = "center";
          
          dialog.addEventListener("click", onDialogClick);
          dialog.addEventListener("cancel", onDialogCancel);
          
          function moveImage(fn) {
            if (!document.startViewTransition) {
              fn();
            } else {
              img.style.viewTransitionName = "active-lightbox-image";
              const transition = document.startViewTransition(() => fn());
              transition.finished.finally(() => {
                img.style.removeProperty("view-transition-name");
              });
            }
          }
          
          moveImage(() => {
            // Save the current inline style so it can be restored later.
            const originalStyle = img.getAttribute("style") || "";
            img.setAttribute("data-original-style", originalStyle);
            // Limit the size of the enlarged image.
            img.style.maxWidth = "90vw";
            img.style.maxHeight = "90vh";
            img.style.width = "auto";
            img.style.height = "auto";
            
            dialog.appendChild(img);
            document.body.appendChild(dialog);
            if (typeof dialog.showModal === "function") {
              dialog.showModal();
            } else {
              dialog.setAttribute("open", "true");
            }
          });
        }
        
        img.addEventListener("click", (e) => {
          // If the image is already inside a dialog, close it.
          if (img.closest("dialog")) {
            e.stopPropagation();
            closeLightbox();
          } else {
            openLightbox();
          }
        });
      });
    });
    </script>
    
    
    
    
</Layout>
